; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_cpu_flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_cpu_flash.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\User -I..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\User\fonts -I..\emWin\GUI_X -I..\emWin\Config -I..\emWin\Include -I..\emWin\emWinTask -I..\User\bsp_stm32f4xx -I..\User\bsp_stm32f4xx\inc -I..\User\images -I..\User\bsp_stm32f4xx\src -I..\User\DSP_Lib\inc -I..\User\DSP_Lib\src -I..\Libraries\STM32F4x7_ETH_Driver\src -I..\Libraries\STM32F4x7_ETH_Driver\inc -IF:\keil\ARM\RV31\INC -IF:\keil\ARM\CMSIS\Include -IF:\keil\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F427_437xx -DSTM32F427_437xx --omf_browse=.\flash\obj\bsp_cpu_flash.crf ..\User\bsp_stm32f4xx\src\bsp_cpu_flash.c]
                          THUMB

                          AREA ||i.bsp_CmpCpuFlash||, CODE, READONLY, ALIGN=1

                  bsp_CmpCpuFlash PROC
;;;130    */
;;;131    uint8_t bsp_CmpCpuFlash(uint32_t _ulFlashAddr, uint8_t *_ucpBuf, uint32_t _ulSize)
000000  b570              PUSH     {r4-r6,lr}
;;;132    {
000002  4603              MOV      r3,r0
;;;133    	uint32_t i;
;;;134    	uint8_t ucIsEqu;	/* 相等标志 */
;;;135    	uint8_t ucByte;
;;;136    
;;;137    	/* 如果偏移地址超过芯片容量，则不改写输出缓冲区 */
;;;138    	if (_ulFlashAddr + _ulSize > FLASH_BASE_ADDR + FLASH_SIZE)
000004  1898              ADDS     r0,r3,r2
000006  f1b06f01          CMP      r0,#0x8100000
00000a  d901              BLS      |L1.16|
;;;139    	{
;;;140    		return FLASH_PARAM_ERR;		/*　函数参数错误　*/
00000c  2003              MOVS     r0,#3
                  |L1.14|
;;;141    	}
;;;142    
;;;143    	/* 长度为0时返回正确 */
;;;144    	if (_ulSize == 0)
;;;145    	{
;;;146    		return FLASH_IS_EQU;		/* Flash内容和待写入的数据相等 */
;;;147    	}
;;;148    
;;;149    	ucIsEqu = 1;			/* 先假设所有字节和待写入的数据相等，如果遇到任何一个不相等，则设置为 0 */
;;;150    	for (i = 0; i < _ulSize; i++)
;;;151    	{
;;;152    		ucByte = *(uint8_t *)_ulFlashAddr;
;;;153    
;;;154    		if (ucByte != *_ucpBuf)
;;;155    		{
;;;156    			if (ucByte != 0xFF)
;;;157    			{
;;;158    				return FLASH_REQ_ERASE;		/* 需要擦除后再写 */
;;;159    			}
;;;160    			else
;;;161    			{
;;;162    				ucIsEqu = 0;	/* 不相等，需要写 */
;;;163    			}
;;;164    		}
;;;165    
;;;166    		_ulFlashAddr++;
;;;167    		_ucpBuf++;
;;;168    	}
;;;169    
;;;170    	if (ucIsEqu == 1)
;;;171    	{
;;;172    		return FLASH_IS_EQU;	/* Flash内容和待写入的数据相等，不需要擦除和写操作 */
;;;173    	}
;;;174    	else
;;;175    	{
;;;176    		return FLASH_REQ_WRITE;	/* Flash不需要擦除，直接写 */
;;;177    	}
;;;178    }
00000e  bd70              POP      {r4-r6,pc}
                  |L1.16|
000010  b90a              CBNZ     r2,|L1.22|
000012  2000              MOVS     r0,#0                 ;146
000014  e7fb              B        |L1.14|
                  |L1.22|
000016  2601              MOVS     r6,#1                 ;149
000018  2400              MOVS     r4,#0                 ;150
00001a  e00b              B        |L1.52|
                  |L1.28|
00001c  781d              LDRB     r5,[r3,#0]            ;152
00001e  7808              LDRB     r0,[r1,#0]            ;154
000020  42a8              CMP      r0,r5                 ;154
000022  d004              BEQ      |L1.46|
000024  2dff              CMP      r5,#0xff              ;156
000026  d001              BEQ      |L1.44|
000028  2002              MOVS     r0,#2                 ;158
00002a  e7f0              B        |L1.14|
                  |L1.44|
00002c  2600              MOVS     r6,#0                 ;162
                  |L1.46|
00002e  1c5b              ADDS     r3,r3,#1              ;166
000030  1c49              ADDS     r1,r1,#1              ;167
000032  1c64              ADDS     r4,r4,#1              ;150
                  |L1.52|
000034  4294              CMP      r4,r2                 ;150
000036  d3f1              BCC      |L1.28|
000038  2e01              CMP      r6,#1                 ;170
00003a  d101              BNE      |L1.64|
00003c  2000              MOVS     r0,#0                 ;172
00003e  e7e6              B        |L1.14|
                  |L1.64|
000040  2001              MOVS     r0,#1                 ;176
000042  e7e4              B        |L1.14|
;;;179    
                          ENDP


                          AREA ||i.bsp_GetSector||, CODE, READONLY, ALIGN=2

                  bsp_GetSector PROC
;;;26     */
;;;27     uint32_t bsp_GetSector(uint32_t Address)
000000  4601              MOV      r1,r0
;;;28     {
;;;29     	uint32_t sector = 0;
000002  2000              MOVS     r0,#0
;;;30     
;;;31     	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
000004  4a2c              LDR      r2,|L2.184|
000006  4291              CMP      r1,r2
000008  d203              BCS      |L2.18|
00000a  f1b16f00          CMP      r1,#0x8000000
00000e  d300              BCC      |L2.18|
;;;32     	{
;;;33     		sector = FLASH_Sector_0;
000010  e050              B        |L2.180|
                  |L2.18|
;;;34     	}
;;;35     	else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
000012  4a2a              LDR      r2,|L2.188|
000014  4291              CMP      r1,r2
000016  d204              BCS      |L2.34|
000018  4a27              LDR      r2,|L2.184|
00001a  4291              CMP      r1,r2
00001c  d301              BCC      |L2.34|
;;;36     	{
;;;37     		sector = FLASH_Sector_1;
00001e  2008              MOVS     r0,#8
000020  e048              B        |L2.180|
                  |L2.34|
;;;38     	}
;;;39     	else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
000022  4a27              LDR      r2,|L2.192|
000024  4291              CMP      r1,r2
000026  d204              BCS      |L2.50|
000028  4a24              LDR      r2,|L2.188|
00002a  4291              CMP      r1,r2
00002c  d301              BCC      |L2.50|
;;;40     	{
;;;41     		sector = FLASH_Sector_2;
00002e  2010              MOVS     r0,#0x10
000030  e040              B        |L2.180|
                  |L2.50|
;;;42     	}
;;;43     	else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
000032  4a24              LDR      r2,|L2.196|
000034  4291              CMP      r1,r2
000036  d204              BCS      |L2.66|
000038  4a21              LDR      r2,|L2.192|
00003a  4291              CMP      r1,r2
00003c  d301              BCC      |L2.66|
;;;44     	{
;;;45     		sector = FLASH_Sector_3;
00003e  2018              MOVS     r0,#0x18
000040  e038              B        |L2.180|
                  |L2.66|
;;;46     	}
;;;47     	else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
000042  4a21              LDR      r2,|L2.200|
000044  4291              CMP      r1,r2
000046  d204              BCS      |L2.82|
000048  4a1e              LDR      r2,|L2.196|
00004a  4291              CMP      r1,r2
00004c  d301              BCC      |L2.82|
;;;48     	{
;;;49     		sector = FLASH_Sector_4;
00004e  2020              MOVS     r0,#0x20
000050  e030              B        |L2.180|
                  |L2.82|
;;;50     	}
;;;51     	else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
000052  4a1e              LDR      r2,|L2.204|
000054  4291              CMP      r1,r2
000056  d204              BCS      |L2.98|
000058  4a1b              LDR      r2,|L2.200|
00005a  4291              CMP      r1,r2
00005c  d301              BCC      |L2.98|
;;;52     	{
;;;53     		sector = FLASH_Sector_5;
00005e  2028              MOVS     r0,#0x28
000060  e028              B        |L2.180|
                  |L2.98|
;;;54     	}
;;;55     	else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
000062  4a1b              LDR      r2,|L2.208|
000064  4291              CMP      r1,r2
000066  d204              BCS      |L2.114|
000068  4a18              LDR      r2,|L2.204|
00006a  4291              CMP      r1,r2
00006c  d301              BCC      |L2.114|
;;;56     	{
;;;57     		sector = FLASH_Sector_6;
00006e  2030              MOVS     r0,#0x30
000070  e020              B        |L2.180|
                  |L2.114|
;;;58     	}
;;;59     	else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
000072  4a18              LDR      r2,|L2.212|
000074  4291              CMP      r1,r2
000076  d204              BCS      |L2.130|
000078  4a15              LDR      r2,|L2.208|
00007a  4291              CMP      r1,r2
00007c  d301              BCC      |L2.130|
;;;60     	{
;;;61     		sector = FLASH_Sector_7;
00007e  2038              MOVS     r0,#0x38
000080  e018              B        |L2.180|
                  |L2.130|
;;;62     	}
;;;63     	else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
000082  4a15              LDR      r2,|L2.216|
000084  4291              CMP      r1,r2
000086  d204              BCS      |L2.146|
000088  4a12              LDR      r2,|L2.212|
00008a  4291              CMP      r1,r2
00008c  d301              BCC      |L2.146|
;;;64     	{
;;;65     		sector = FLASH_Sector_8;
00008e  2040              MOVS     r0,#0x40
000090  e010              B        |L2.180|
                  |L2.146|
;;;66     	}
;;;67     	else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
000092  4a12              LDR      r2,|L2.220|
000094  4291              CMP      r1,r2
000096  d204              BCS      |L2.162|
000098  4a0f              LDR      r2,|L2.216|
00009a  4291              CMP      r1,r2
00009c  d301              BCC      |L2.162|
;;;68     	{
;;;69     		sector = FLASH_Sector_9;
00009e  2048              MOVS     r0,#0x48
0000a0  e008              B        |L2.180|
                  |L2.162|
;;;70     	}
;;;71     	else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
0000a2  4a0f              LDR      r2,|L2.224|
0000a4  4291              CMP      r1,r2
0000a6  d204              BCS      |L2.178|
0000a8  4a0c              LDR      r2,|L2.220|
0000aa  4291              CMP      r1,r2
0000ac  d301              BCC      |L2.178|
;;;72     	{
;;;73     		sector = FLASH_Sector_10;
0000ae  2050              MOVS     r0,#0x50
0000b0  e000              B        |L2.180|
                  |L2.178|
;;;74     	}
;;;75     	else	/*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
;;;76     	{
;;;77     		sector = FLASH_Sector_11;
0000b2  2058              MOVS     r0,#0x58
                  |L2.180|
;;;78     	}
;;;79     
;;;80     	return sector;
;;;81     }
0000b4  4770              BX       lr
;;;82     
                          ENDP

0000b6  0000              DCW      0x0000
                  |L2.184|
                          DCD      0x08004000
                  |L2.188|
                          DCD      0x08008000
                  |L2.192|
                          DCD      0x0800c000
                  |L2.196|
                          DCD      0x08010000
                  |L2.200|
                          DCD      0x08020000
                  |L2.204|
                          DCD      0x08040000
                  |L2.208|
                          DCD      0x08060000
                  |L2.212|
                          DCD      0x08080000
                  |L2.216|
                          DCD      0x080a0000
                  |L2.220|
                          DCD      0x080c0000
                  |L2.224|
                          DCD      0x080e0000

                          AREA ||i.bsp_ReadCpuFlash||, CODE, READONLY, ALIGN=1

                  bsp_ReadCpuFlash PROC
;;;92     */
;;;93     uint8_t bsp_ReadCpuFlash(uint32_t _ulFlashAddr, uint8_t *_ucpDst, uint32_t _ulSize)
000000  b510              PUSH     {r4,lr}
;;;94     {
000002  4603              MOV      r3,r0
;;;95     	uint32_t i;
;;;96     
;;;97     	/* 如果偏移地址超过芯片容量，则不改写输出缓冲区 */
;;;98     	if (_ulFlashAddr + _ulSize > FLASH_BASE_ADDR + FLASH_SIZE)
000004  1898              ADDS     r0,r3,r2
000006  f1b06f01          CMP      r0,#0x8100000
00000a  d901              BLS      |L3.16|
;;;99     	{
;;;100    		return 1;
00000c  2001              MOVS     r0,#1
                  |L3.14|
;;;101    	}
;;;102    
;;;103    	/* 长度为0时不继续操作,否则起始地址为奇地址会出错 */
;;;104    	if (_ulSize == 0)
;;;105    	{
;;;106    		return 1;
;;;107    	}
;;;108    
;;;109    	for (i = 0; i < _ulSize; i++)
;;;110    	{
;;;111    		*_ucpDst++ = *(uint8_t *)_ulFlashAddr++;
;;;112    	}
;;;113    
;;;114    	return 0;
;;;115    }
00000e  bd10              POP      {r4,pc}
                  |L3.16|
000010  b90a              CBNZ     r2,|L3.22|
000012  2001              MOVS     r0,#1                 ;106
000014  e7fb              B        |L3.14|
                  |L3.22|
000016  2400              MOVS     r4,#0                 ;109
000018  e004              B        |L3.36|
                  |L3.26|
00001a  f8130b01          LDRB     r0,[r3],#1            ;111
00001e  f8010b01          STRB     r0,[r1],#1            ;111
000022  1c64              ADDS     r4,r4,#1              ;109
                  |L3.36|
000024  4294              CMP      r4,r2                 ;109
000026  d3f8              BCC      |L3.26|
000028  2000              MOVS     r0,#0                 ;114
00002a  e7f0              B        |L3.14|
;;;116    
                          ENDP


                          AREA ||i.bsp_WriteCpuFlash||, CODE, READONLY, ALIGN=1

                  bsp_WriteCpuFlash PROC
;;;189    */
;;;190    uint8_t bsp_WriteCpuFlash(uint32_t _ulFlashAddr, uint8_t *_ucpSrc, uint32_t _ulSize)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;191    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;192    	uint32_t i;
;;;193    	uint8_t ucRet;
;;;194    
;;;195    	/* 如果偏移地址超过芯片容量，则不改写输出缓冲区 */
;;;196    	if (_ulFlashAddr + _ulSize > FLASH_BASE_ADDR + FLASH_SIZE)
00000a  1930              ADDS     r0,r6,r4
00000c  f1b06f01          CMP      r0,#0x8100000
000010  d902              BLS      |L4.24|
;;;197    	{
;;;198    		return 1;
000012  2001              MOVS     r0,#1
                  |L4.20|
;;;199    	}
;;;200    
;;;201    	/* 长度为0时不继续操作  */
;;;202    	if (_ulSize == 0)
;;;203    	{
;;;204    		return 0;
;;;205    	}
;;;206    
;;;207    	ucRet = bsp_CmpCpuFlash(_ulFlashAddr, _ucpSrc, _ulSize);
;;;208    
;;;209    	if (ucRet == FLASH_IS_EQU)
;;;210    	{
;;;211    		return 0;
;;;212    	}
;;;213    
;;;214    	__set_PRIMASK(1);  		/* 关中断 */
;;;215    
;;;216    	/* FLASH 解锁 */
;;;217    	FLASH_Unlock();
;;;218    
;;;219      	/* Clear pending flags (if any) */
;;;220    	FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
;;;221                      FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);
;;;222    
;;;223    	/* 需要擦除 */
;;;224    	if (ucRet == FLASH_REQ_ERASE)
;;;225    	{
;;;226    		FLASH_EraseSector(bsp_GetSector(_ulFlashAddr), VoltageRange_3);
;;;227    	}
;;;228    
;;;229    	/* 按字节模式编程（为提高效率，可以按字编程，一次写入4字节） */
;;;230    	for (i = 0; i < _ulSize; i++)
;;;231    	{
;;;232    		FLASH_ProgramByte(_ulFlashAddr++, *_ucpSrc++);
;;;233    	}
;;;234    
;;;235      	/* Flash 加锁，禁止写Flash控制寄存器 */
;;;236      	FLASH_Lock();
;;;237    
;;;238      	__set_PRIMASK(0);  		/* 开中断 */
;;;239    
;;;240    	return 0;
;;;241    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L4.24|
000018  b90c              CBNZ     r4,|L4.30|
00001a  2000              MOVS     r0,#0                 ;204
00001c  e7fa              B        |L4.20|
                  |L4.30|
00001e  4622              MOV      r2,r4                 ;207
000020  4639              MOV      r1,r7                 ;207
000022  4630              MOV      r0,r6                 ;207
000024  f7fffffe          BL       bsp_CmpCpuFlash
000028  4605              MOV      r5,r0                 ;207
00002a  b90d              CBNZ     r5,|L4.48|
00002c  2000              MOVS     r0,#0                 ;211
00002e  e7f1              B        |L4.20|
                  |L4.48|
000030  2001              MOVS     r0,#1                 ;214
000032  f3808810          MSR      PRIMASK,r0            ;214
000036  bf00              NOP                            ;214
000038  f7fffffe          BL       FLASH_Unlock
00003c  20f3              MOVS     r0,#0xf3              ;220
00003e  f7fffffe          BL       FLASH_ClearFlag
000042  2d02              CMP      r5,#2                 ;224
000044  d106              BNE      |L4.84|
000046  4630              MOV      r0,r6                 ;226
000048  f7fffffe          BL       bsp_GetSector
00004c  4681              MOV      r9,r0                 ;226
00004e  2102              MOVS     r1,#2                 ;226
000050  f7fffffe          BL       FLASH_EraseSector
                  |L4.84|
000054  f04f0800          MOV      r8,#0                 ;230
000058  e007              B        |L4.106|
                  |L4.90|
00005a  f8171b01          LDRB     r1,[r7],#1            ;232
00005e  4630              MOV      r0,r6                 ;232
000060  1c76              ADDS     r6,r6,#1              ;232
000062  f7fffffe          BL       FLASH_ProgramByte
000066  f1080801          ADD      r8,r8,#1              ;230
                  |L4.106|
00006a  45a0              CMP      r8,r4                 ;230
00006c  d3f5              BCC      |L4.90|
00006e  f7fffffe          BL       FLASH_Lock
000072  2000              MOVS     r0,#0                 ;238
000074  f3808810          MSR      PRIMASK,r0            ;238
000078  bf00              NOP                            ;238
00007a  bf00              NOP                            ;240
00007c  e7ca              B        |L4.20|
;;;242    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\User\\bsp_stm32f4xx\\src\\bsp_cpu_flash.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_bsp_cpu_flash_c_4320bcf1____REV16|
#line 129 "F:\\keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_cpu_flash_c_4320bcf1____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_bsp_cpu_flash_c_4320bcf1____REVSH|
#line 144
|__asm___15_bsp_cpu_flash_c_4320bcf1____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
