; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\User -I..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\User\fonts -I..\emWin\GUI_X -I..\emWin\Config -I..\emWin\Include -I..\emWin\emWinTask -I..\User\bsp_stm32f4xx -I..\User\bsp_stm32f4xx\inc -I..\User\images -I..\User\bsp_stm32f4xx\src -I..\User\DSP_Lib\inc -I..\User\DSP_Lib\src -I..\Libraries\STM32F4x7_ETH_Driver\src -I..\Libraries\STM32F4x7_ETH_Driver\inc -IF:\keil\ARM\RV31\INC -IF:\keil\ARM\CMSIS\Include -IF:\keil\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F427_437xx -DSTM32F427_437xx --omf_browse=.\flash\obj\main.crf ..\User\main.c]
                          THUMB

                          AREA ||i.SystemCheck||, CODE, READONLY, ALIGN=2

                  SystemCheck PROC
;;;15     		float	tempA,tempB,tempC,tempD ;
;;;16     void SystemCheck(void)
000000  b510              PUSH     {r4,lr}
;;;17     {
;;;18     	Valve_GPIO_Config();
000002  f7fffffe          BL       Valve_GPIO_Config
;;;19     //	while(1)
;;;20     //	{
;;;21     //		
;;;22     //		tempA = ADC_1(ADC_T_10A);	
;;;23     //		tempA = 3.0 * tempA / 4096.0 / 2.0;
;;;24     //		tempA = -(-232.6 * log(log10(37.4 * 1000.0 * tempA / (1.2 - tempA))) + 343.82);
;;;25     //		A1=tempA*10;
;;;26     //		tempB = ADC_1(ADC_T_10B);
;;;27     //		tempB = 3.0 * tempB / 4096.0 / 2.0;
;;;28     //		tempB = -(-232.6 * log(log10(37.4 * 1000.0 * tempB / (1.2 - tempB))) + 343.82);
;;;29     //		A2=tempB*10;
;;;30     //		tempC = ADC_1(ADC_T18);
;;;31     //		tempC = 3.0 * tempC / 4096.0;
;;;32     //		tempC = (((2500.0*4.0*tempC)/(2.5*490.0))+(2500.0*100.0)/2600.0)/(1-((4.0*tempC)/(490.0*2.5))-(100.0/2600.0));
;;;33     //		tempC = 0.001 * tempC * tempC + 2.3589 * tempC - 245.87;
;;;34     //		A3=tempC*10;
;;;35     //		tempD = ADC_1(ADC_T42);
;;;36     //		tempD = 3.0 * tempD / 4096.0;
;;;37     //		tempD = (((2500.0*4.0*tempD)/(490.0*2.5))+(2500.0*100.0)/2600.0)/(1-((4.0*tempD)/(490.0*2.5))-(100.0/2600.0));
;;;38     //		tempD = (tempD - 100.0) / 0.385 - 1;
;;;39     //		A4=tempD*10;
;;;40     //		bsp_DelayMS(5);
;;;41     //		if(A1>85&&A1<110&&A2>85&&A2<110&&A3>150&&A3<250&&A4>360&&A4<505)
;;;42     //		{
;;;43     //			break;
;;;44     //		}
;;;45     //	}
;;;46     //	Motor_Init();	
;;;47     	PowerCheck();
000006  f7fffffe          BL       PowerCheck
;;;48     	m=Test();
00000a  f7fffffe          BL       Test
00000e  4902              LDR      r1,|L1.24|
000010  6008              STR      r0,[r1,#0]  ; m
;;;49     
;;;50     	PerkCheck();
000012  f7fffffe          BL       PerkCheck
;;;51     }
000016  bd10              POP      {r4,pc}
;;;52     /*
                          ENDP

                  |L1.24|
                          DCD      m

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;60     
;;;61     int main(void)
000000  f7fffffe          BL       bsp_Init
;;;62     {
;;;63     
;;;64     
;;;65     	bsp_Init();	/* 为了是main函数看起来更简洁些，我们将硬件初始化的代码封装到这个函数 */
;;;66     	LoadParam();	/* 读取应用程序参数, 该函数在param.c */
000004  f7fffffe          BL       LoadParam
;;;67     
;;;68     	LCD_InitHard();	/* 初始化显示器硬件(配置GPIO和FSMC,给LCD发送初始化指令) */
000008  f7fffffe          BL       LCD_InitHard
;;;69     	TOUCH_InitHard();
00000c  f7fffffe          BL       TOUCH_InitHard
;;;70     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_CRC, ENABLE);
000010  2101              MOVS     r1,#1
000012  0308              LSLS     r0,r1,#12
000014  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;71     //LCD_ClrScr(CL_BLUE);  		/* 清屏，【背景蓝色 */
;;;72     
;;;73     //LCD_SetBackLight(g_tParam.ucBackLight);		/* 设置背光亮度。 */
;;;74     	ucStatus = MS_MAIN_MENU;	/* 初始状态 = 图标界面 */
000018  2000              MOVS     r0,#0
00001a  4907              LDR      r1,|L2.56|
00001c  8008              STRH     r0,[r1,#0]
;;;75     	LightModulation(ON);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       LightModulation
;;;76     	bsp_DelayMS(20000);
000024  f6446020          MOV      r0,#0x4e20
000028  f7fffffe          BL       bsp_DelayMS
;;;77     	LightModulation(OFF);
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       LightModulation
;;;78     	while(1)
000032  bf00              NOP      
                  |L2.52|
000034  e7fe              B        |L2.52|
;;;79     	{}
;;;80     //	ChopperCheck(1);
;;;81     
;;;82     	SystemCheck();
;;;83     	while (1)
;;;84     	{
;;;85     		switch (ucStatus)
;;;86     		{
;;;87     //		case MS_CALIBRATION:
;;;88     //			 	TOUCH_Calibration();		/* 校准触摸, 该界面实现在bsp_touch.c */
;;;89     //			 	ucStatus = MS_MAIN_MENU; 	/* 校准完毕后，返回到主界面 */
;;;90     //			 	break;
;;;91     			 case MS_MAIN_MENU:
;;;92     					
;;;93     					ucStatus = MainMenu();		/* 主界面状态 */
;;;94     					break;
;;;95     			 case MS_MEASURETURE:			/* 样品检测 */
;;;96     
;;;97     					MainTask();
;;;98     					ucStatus = MS_MAIN_MENU;     		 
;;;99     					break;
;;;100    			 case MS_QC:			/* 质量控制 */
;;;101    			 
;;;102    					ucStatus = MS_MAIN_MENU;
;;;103    					break;
;;;104    			 case MS_PREFERENCES:			/* 参数设置 */
;;;105    			
;;;106    					ucStatus = MS_MAIN_MENU;
;;;107    					break;
;;;108    			 case MS_RECORD:			/* 检测记录 */
;;;109    			 
;;;110    					ucStatus = MS_MAIN_MENU;
;;;111    					break;
;;;112    			 case MS_PRINT:			/* 打印 */
;;;113    			 
;;;114    					ucStatus = MS_MAIN_MENU;
;;;115    					break;
;;;116    			 case MS_MAINTAINING:			/* 维护 */
;;;117    					
;;;118    					TOUCH_Calibration();
;;;119    					ucStatus = MS_MAIN_MENU;
;;;120    					break;
;;;121    			default:
;;;122    				
;;;123    					ucStatus = MS_MAIN_MENU;
;;;124    					break;
;;;125    		}
;;;126    	}
;;;127        
;;;128    	
;;;129    }
;;;130    
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      ucStatus

                          AREA ||.data||, DATA, ALIGN=2

                  ||A1||
000000  0000              DCB      0x00,0x00
                  ||A2||
000002  0000              DCB      0x00,0x00
                  ||A3||
000004  0000              DCB      0x00,0x00
                  ||A4||
000006  0000              DCB      0x00,0x00
                  tempA
                          DCD      0x00000000
                  tempB
                          DCD      0x00000000
                  tempC
                          DCD      0x00000000
                  tempD
                          DCD      0x00000000
                  ucStatus
000018  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\User\\main.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_373acf2d____REV16|
#line 129 "F:\\keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_373acf2d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_373acf2d____REVSH|
#line 144
|__asm___6_main_c_373acf2d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
