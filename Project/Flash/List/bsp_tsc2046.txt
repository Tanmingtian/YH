; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_tsc2046.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_tsc2046.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\User -I..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\User\fonts -I..\emWin\GUI_X -I..\emWin\Config -I..\emWin\Include -I..\emWin\emWinTask -I..\User\bsp_stm32f4xx -I..\User\bsp_stm32f4xx\inc -I..\User\images -I..\User\bsp_stm32f4xx\src -I..\User\DSP_Lib\inc -I..\User\DSP_Lib\src -I..\Libraries\STM32F4x7_ETH_Driver\src -I..\Libraries\STM32F4x7_ETH_Driver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F427_437xx -DSTM32F427_437xx --omf_browse=.\flash\obj\bsp_tsc2046.crf ..\User\bsp_stm32f4xx\src\bsp_tsc2046.c]
                          THUMB

                          AREA ||i.TSC2046_CfgSpiHard||, CODE, READONLY, ALIGN=2

                  TSC2046_CfgSpiHard PROC
;;;104    */
;;;105    static void TSC2046_CfgSpiHard(void)
000000  b500              PUSH     {lr}
;;;106    {
000002  b085              SUB      sp,sp,#0x14
;;;107    	SPI_InitTypeDef  SPI_InitStructure;
;;;108    
;;;109    	/* 配置 SPI1工作模式 */
;;;110    	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
;;;111    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
00000a  f44f7082          MOV      r0,#0x104
00000e  f8ad0002          STRH     r0,[sp,#2]
;;;112    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
000012  2000              MOVS     r0,#0
000014  f8ad0004          STRH     r0,[sp,#4]
;;;113    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
000018  f8ad0006          STRH     r0,[sp,#6]
;;;114    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
00001c  f8ad0008          STRH     r0,[sp,#8]
;;;115    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft; 		/* 软件控制片选 */
000020  f44f7000          MOV      r0,#0x200
000024  f8ad000a          STRH     r0,[sp,#0xa]
;;;116    	/*
;;;117    		SPI_BaudRatePrescaler_64 对应SCK时钟频率约1M
;;;118    		TSC2046 对SCK时钟的要求，高电平和低电平最小200ns，周期400ns，也就是2.5M
;;;119    
;;;120    		示波器实测频率
;;;121    		SPI_BaudRatePrescaler_64 时，SCK时钟频率约 1.116M
;;;122    		SPI_BaudRatePrescaler_32 时，SCK时钟频率月 2.232M
;;;123    	*/
;;;124    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
000028  2028              MOVS     r0,#0x28
00002a  f8ad000c          STRH     r0,[sp,#0xc]
;;;125    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
00002e  2000              MOVS     r0,#0
000030  f8ad000e          STRH     r0,[sp,#0xe]
;;;126    	SPI_InitStructure.SPI_CRCPolynomial = 7;
000034  2007              MOVS     r0,#7
000036  f8ad0010          STRH     r0,[sp,#0x10]
;;;127    	SPI_Init(SPI1,&SPI_InitStructure);
00003a  4669              MOV      r1,sp
00003c  4804              LDR      r0,|L1.80|
00003e  f7fffffe          BL       SPI_Init
;;;128    
;;;129    	/* 使能 SPI1 */
;;;130    	SPI_Cmd(SPI1,ENABLE);
000042  2101              MOVS     r1,#1
000044  4802              LDR      r0,|L1.80|
000046  f7fffffe          BL       SPI_Cmd
;;;131    }
00004a  b005              ADD      sp,sp,#0x14
00004c  bd00              POP      {pc}
;;;132    
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      0x40013000

                          AREA ||i.TSC2046_InitHard||, CODE, READONLY, ALIGN=2

                  TSC2046_InitHard PROC
;;;28     */
;;;29     void TSC2046_InitHard(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;30     {
;;;31     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;32     
;;;33     	/* 打开GPIO时钟 */
;;;34     	RCC_AHB1PeriphClockCmd(TSC2046_RCC_CS | TSC2046_RCC_BUSY | TSC2046_RCC_INT, ENABLE);
000002  2101              MOVS     r1,#1
000004  f44f7084          MOV      r0,#0x108
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;35     
;;;36     	/* 配置几个推完输出IO */
;;;37     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
00000c  2001              MOVS     r0,#1
00000e  f88d0004          STRB     r0,[sp,#4]
;;;38     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000012  2000              MOVS     r0,#0
000014  f88d0006          STRB     r0,[sp,#6]
;;;39     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
000018  f88d0007          STRB     r0,[sp,#7]
;;;40     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;	/* IO口最大速度 */
00001c  2001              MOVS     r0,#1
00001e  f88d0005          STRB     r0,[sp,#5]
;;;41     
;;;42     	GPIO_InitStructure.GPIO_Pin = TSC2046_PIN_CS;
000022  0280              LSLS     r0,r0,#10
000024  9000              STR      r0,[sp,#0]
;;;43     	GPIO_Init(TSC2046_PORT_CS, &GPIO_InitStructure);
000026  4669              MOV      r1,sp
000028  480d              LDR      r0,|L2.96|
00002a  f7fffffe          BL       GPIO_Init
;;;44     
;;;45     	/* 配置TP_BUSY 为浮动输入模式(实际上CPU复位后就是输入状态) */
;;;46     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;		/* 设为输入口 */
00002e  2000              MOVS     r0,#0
000030  f88d0004          STRB     r0,[sp,#4]
;;;47     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000034  f88d0006          STRB     r0,[sp,#6]
;;;48     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 无需上下拉电阻 */
000038  f88d0007          STRB     r0,[sp,#7]
;;;49     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	/* IO口最大速度 */
00003c  2002              MOVS     r0,#2
00003e  f88d0005          STRB     r0,[sp,#5]
;;;50     
;;;51     	GPIO_InitStructure.GPIO_Pin = TSC2046_PIN_BUSY;
000042  2008              MOVS     r0,#8
000044  9000              STR      r0,[sp,#0]
;;;52     	GPIO_Init(TSC2046_PORT_BUSY, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4806              LDR      r0,|L2.100|
00004a  f7fffffe          BL       GPIO_Init
;;;53     
;;;54     	/* 配置触笔中断IO */
;;;55     	GPIO_InitStructure.GPIO_Pin = TSC2046_PIN_INT;
00004e  2008              MOVS     r0,#8
000050  9000              STR      r0,[sp,#0]
;;;56     	GPIO_Init(TSC2046_PORT_INT, &GPIO_InitStructure);
000052  4669              MOV      r1,sp
000054  4802              LDR      r0,|L2.96|
000056  f7fffffe          BL       GPIO_Init
;;;57     
;;;58     	TSC2046_CfgSpiHard();
00005a  f7fffffe          BL       TSC2046_CfgSpiHard
;;;59     }
00005e  bd1c              POP      {r2-r4,pc}
;;;60     
                          ENDP

                  |L2.96|
                          DCD      0x40022000
                  |L2.100|
                          DCD      0x40020c00

                          AREA ||i.TSC2046_PenInt||, CODE, READONLY, ALIGN=2

                  TSC2046_PenInt PROC
;;;174    */
;;;175    uint8_t TSC2046_PenInt(void)
000000  b510              PUSH     {r4,lr}
;;;176    {
;;;177    	if (GPIO_ReadInputDataBit(TSC2046_PORT_INT, TSC2046_PIN_INT) == Bit_RESET)
000002  2108              MOVS     r1,#8
000004  4803              LDR      r0,|L3.20|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
00000a  b908              CBNZ     r0,|L3.16|
;;;178    	{
;;;179    		return 1;
00000c  2001              MOVS     r0,#1
                  |L3.14|
;;;180    	}
;;;181    	else
;;;182    	{
;;;183    		return 0;
;;;184    	}
;;;185    }
00000e  bd10              POP      {r4,pc}
                  |L3.16|
000010  2000              MOVS     r0,#0                 ;183
000012  e7fc              B        |L3.14|
;;;186    
                          ENDP

                  |L3.20|
                          DCD      0x40022000

                          AREA ||i.TSC2046_ReadAdc||, CODE, READONLY, ALIGN=1

                  TSC2046_ReadAdc PROC
;;;68     */
;;;69     uint16_t TSC2046_ReadAdc(uint8_t _ucCh)
000000  b570              PUSH     {r4-r6,lr}
;;;70     {
000002  4605              MOV      r5,r0
;;;71     	uint16_t usAdc;
;;;72     
;;;73     	TSC2046_SetCS(0);		/* 使能TS2046的片选 */
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       TSC2046_SetCS
;;;74     
;;;75     	/*
;;;76     		TSC2046 控制字（8Bit）
;;;77     		Bit7   = S     起始位，必须是1
;;;78     		Bit6:4 = A2-A0 模拟输入通道选择A2-A0; 共有6个通道。
;;;79     		Bit3   = MODE  ADC位数选择，0 表示12Bit;1表示8Bit
;;;80     		Bit2   = SER/DFR 模拟输入形式，  1表示单端输入；0表示差分输入
;;;81     		Bit1:0 = PD1-PD0 掉电模式选择位
;;;82     	*/
;;;83     	bsp_spiWrite0((1 << 7) | (_ucCh << 4));			/* 选择通道1, 测量X位置 */
00000a  2180              MOVS     r1,#0x80
00000c  ea411105          ORR      r1,r1,r5,LSL #4
000010  b2c8              UXTB     r0,r1
000012  f7fffffe          BL       bsp_spiWrite0
;;;84     
;;;85     	/* 读ADC结果, 12位ADC值的高位先传，前12bit有效，最后4bit填0 */
;;;86     	usAdc = bsp_spiRead0();		/* 发送的0x00可以为任意值，无意义 */
000016  f7fffffe          BL       bsp_spiRead0
00001a  4604              MOV      r4,r0
;;;87     	usAdc <<= 8;
00001c  f64f70ff          MOV      r0,#0xffff
000020  ea002404          AND      r4,r0,r4,LSL #8
;;;88     	usAdc += bsp_spiRead0();		/* 获得12位的ADC采样值 */
000024  f7fffffe          BL       bsp_spiRead0
000028  4420              ADD      r0,r0,r4
00002a  b284              UXTH     r4,r0
;;;89     
;;;90     	usAdc >>= 3;						/* 右移3位，保留12位有效数字.  */
00002c  10e4              ASRS     r4,r4,#3
;;;91     
;;;92     	TSC2046_SetCS(1);					/* 禁能片选 */
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       TSC2046_SetCS
;;;93     
;;;94     	return (usAdc);
000034  4620              MOV      r0,r4
;;;95     }
000036  bd70              POP      {r4-r6,pc}
;;;96     
                          ENDP


                          AREA ||i.TSC2046_SetCS||, CODE, READONLY, ALIGN=2

                  TSC2046_SetCS PROC
;;;140    */
;;;141    static void TSC2046_SetCS(uint8_t _level)
000000  b510              PUSH     {r4,lr}
;;;142    {
000002  4604              MOV      r4,r0
;;;143    	if (_level == 0)
000004  b954              CBNZ     r4,|L5.28|
;;;144    	{
;;;145    		bsp_SpiBusEnter();	/* 占用SPI总线， 用于总线共享 */
000006  f7fffffe          BL       bsp_SpiBusEnter
;;;146    
;;;147    		#ifdef SOFT_SPI		/* 软件SPI */
;;;148    			bsp_SetSpiSck(0);
;;;149    			TSC2046_CS_0();
;;;150    		#endif
;;;151    
;;;152    		#ifdef HARD_SPI		/* 硬件SPI */
;;;153    			TSC2046_CS_0();
00000a  f44f6080          MOV      r0,#0x400
00000e  4907              LDR      r1,|L5.44|
000010  8348              STRH     r0,[r1,#0x1a]
;;;154    
;;;155    			bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
000012  f44f704b          MOV      r0,#0x32c
000016  f7fffffe          BL       bsp_SPI_Init
00001a  e005              B        |L5.40|
                  |L5.28|
;;;156    				| SPI_CPOL_Low | SPI_CPHA_1Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_64 | SPI_FirstBit_MSB);
;;;157    		#endif
;;;158    	}
;;;159    	else
;;;160    	{
;;;161    		TSC2046_CS_1();
00001c  f44f6080          MOV      r0,#0x400
000020  4902              LDR      r1,|L5.44|
000022  8308              STRH     r0,[r1,#0x18]
;;;162    
;;;163    		bsp_SpiBusExit();	/* 释放SPI总线， 用于总线共享 */
000024  f7fffffe          BL       bsp_SpiBusExit
                  |L5.40|
;;;164    	}
;;;165    }
000028  bd10              POP      {r4,pc}
;;;166    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x40022000

;*** Start embedded assembler ***

#line 1 "..\\User\\bsp_stm32f4xx\\src\\bsp_tsc2046.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tsc2046_c_ffc720e2____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_tsc2046_c_ffc720e2____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tsc2046_c_ffc720e2____REVSH|
#line 144
|__asm___13_bsp_tsc2046_c_ffc720e2____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
