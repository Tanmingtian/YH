; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\stm32f4xx_it.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\stm32f4xx_it.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\User -I..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\User\fonts -I..\emWin\GUI_X -I..\emWin\Config -I..\emWin\Include -I..\emWin\emWinTask -I..\User\bsp_stm32f4xx -I..\User\bsp_stm32f4xx\inc -I..\User\images -I..\User\bsp_stm32f4xx\src -I..\User\DSP_Lib\inc -I..\User\DSP_Lib\src -I..\Libraries\STM32F4x7_ETH_Driver\src -I..\Libraries\STM32F4x7_ETH_Driver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F427_437xx -DSTM32F427_437xx --omf_browse=.\flash\obj\stm32f4xx_it.crf ..\User\bsp_stm32f4xx\stm32f4xx_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
;;;89     */
;;;90     void BusFault_Handler(void)
000000  bf00              NOP      
                  |L1.2|
;;;91     {
;;;92       /* 当总线异常时进入死循环 */
;;;93       while (1)
000002  e7fe              B        |L1.2|
;;;94       {
;;;95       }
;;;96     }
;;;97     
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;121    */
;;;122    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;123    {
;;;124    }
;;;125    
                          ENDP


                          AREA ||i.EXTI9_5_IRQHandler||, CODE, READONLY, ALIGN=2

                  EXTI9_5_IRQHandler PROC
;;;128    *******************************************************************************/
;;;129    void EXTI9_5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;130    {
;;;131    	if(EXTI_GetITStatus(EXTI_LINE_TripSwitch) != RESET)
000002  2080              MOVS     r0,#0x80
000004  f7fffffe          BL       EXTI_GetITStatus
000008  b310              CBZ      r0,|L3.80|
;;;132    	{
;;;133    		if(cw_status==BACKWARD)
00000a  4812              LDR      r0,|L3.84|
00000c  7800              LDRB     r0,[r0,#0]  ; cw_status
00000e  2801              CMP      r0,#1
000010  d11b              BNE      |L3.74|
;;;134    		{
;;;135    			//补足脉冲数
;;;136    			PulseCount=PulseNum+AddedNum+500;
000012  4811              LDR      r0,|L3.88|
000014  8800              LDRH     r0,[r0,#0]  ; PulseNum
000016  4911              LDR      r1,|L3.92|
000018  8809              LDRH     r1,[r1,#0]  ; AddedNum
00001a  4408              ADD      r0,r0,r1
00001c  f50070fa          ADD      r0,r0,#0x1f4
000020  490f              LDR      r1,|L3.96|
000022  8008              STRH     r0,[r1,#0]
;;;137    			//电机中断和定时器关闭
;;;138    			TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
000024  2200              MOVS     r2,#0
000026  2101              MOVS     r1,#1
000028  0788              LSLS     r0,r1,#30
00002a  f7fffffe          BL       TIM_ITConfig
;;;139    			TIM_Cmd(TIM2,DISABLE);
00002e  2100              MOVS     r1,#0
000030  f04f4080          MOV      r0,#0x40000000
000034  f7fffffe          BL       TIM_Cmd
;;;140    			//关闭外部中断					 
;;;141    			EXTI->IMR&=0xFFFFFF7F;
000038  480a              LDR      r0,|L3.100|
00003a  6800              LDR      r0,[r0,#0]
00003c  f0200080          BIC      r0,r0,#0x80
000040  4908              LDR      r1,|L3.100|
000042  6008              STR      r0,[r1,#0]
;;;142    			TripSwitchStatus=1;
000044  2001              MOVS     r0,#1
000046  4908              LDR      r1,|L3.104|
000048  7008              STRB     r0,[r1,#0]
                  |L3.74|
;;;143    		}
;;;144    		EXTI_ClearITPendingBit(EXTI_LINE_TripSwitch);
00004a  2080              MOVS     r0,#0x80
00004c  f7fffffe          BL       EXTI_ClearITPendingBit
                  |L3.80|
;;;145    	}
;;;146    }
000050  bd10              POP      {r4,pc}
;;;147    
                          ENDP

000052  0000              DCW      0x0000
                  |L3.84|
                          DCD      cw_status
                  |L3.88|
                          DCD      PulseNum
                  |L3.92|
                          DCD      AddedNum
                  |L3.96|
                          DCD      PulseCount
                  |L3.100|
                          DCD      0x40013c00
                  |L3.104|
                          DCD      TripSwitchStatus

                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=2

                  HardFault_Handler PROC
;;;45     */
;;;46     void HardFault_Handler(void)
000000  a109              ADR      r1,|L4.40|
;;;47     {
;;;48     #if 1
;;;49       const char *pError = ERR_INFO;
;;;50       uint8_t i;
;;;51     
;;;52       for (i = 0; i < sizeof(ERR_INFO); i++)
000002  2000              MOVS     r0,#0
000004  e00b              B        |L4.30|
                  |L4.6|
;;;53       {
;;;54          USART1->DR = pError[i];
000006  5c0a              LDRB     r2,[r1,r0]
000008  4b12              LDR      r3,|L4.84|
00000a  809a              STRH     r2,[r3,#4]
;;;55          /* 等待发送结束 */
;;;56          while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET);
00000c  bf00              NOP      
                  |L4.14|
00000e  4a11              LDR      r2,|L4.84|
000010  8812              LDRH     r2,[r2,#0]
000012  f0020240          AND      r2,r2,#0x40
000016  2a00              CMP      r2,#0
000018  d0f9              BEQ      |L4.14|
00001a  1c42              ADDS     r2,r0,#1              ;52
00001c  b2d0              UXTB     r0,r2                 ;52
                  |L4.30|
00001e  282a              CMP      r0,#0x2a              ;52
000020  d3f1              BCC      |L4.6|
;;;57       }
;;;58     #endif
;;;59     
;;;60       /* 当硬件失效异常发生时进入死循环 */
;;;61       while (1)
000022  bf00              NOP      
                  |L4.36|
000024  e7fe              B        |L4.36|
;;;62       {
;;;63       }
;;;64     }
;;;65     
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
000028  0d0a456e          DCB      "\r\nEnter HardFault_Handler, System Halt.\r\n",0
00002c  74657220
000030  48617264
000034  4661756c
000038  745f4861
00003c  6e646c65
000040  722c2053
000044  79737465
000048  6d204861
00004c  6c742e0d
000050  0a00    
000052  00                DCB      0
000053  00                DCB      0
                  |L4.84|
                          DCD      0x40011000

                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
;;;73     */
;;;74     void MemManage_Handler(void)
000000  bf00              NOP      
                  |L5.2|
;;;75     {
;;;76       /* 当内存管理异常发生时进入死循环 */
;;;77       while (1)
000002  e7fe              B        |L5.2|
;;;78       {
;;;79       }
;;;80     }
;;;81     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;32     */
;;;33     void NMI_Handler(void)
000000  4770              BX       lr
;;;34     {
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.SPI2_IRQHandler||, CODE, READONLY, ALIGN=2

                  SPI2_IRQHandler PROC
;;;175    //AK5385中断
;;;176    void SPI2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;177    {
;;;178    	u16 temp;
;;;179    	//用于AK5351中断
;;;180    	if (SPI_I2S_GetITStatus(SPI2, SPI_I2S_IT_RXNE) == SET)
000002  2160              MOVS     r1,#0x60
000004  482d              LDR      r0,|L7.188|
000006  f7fffffe          BL       SPI_I2S_GetITStatus
00000a  2801              CMP      r0,#1
00000c  d153              BNE      |L7.182|
;;;181    	{
;;;182    		temp=SPI_I2S_ReceiveData(SPI2);
00000e  482b              LDR      r0,|L7.188|
000010  f7fffffe          BL       SPI_I2S_ReceiveData
000014  4604              MOV      r4,r0
;;;183    		SPI_I2S_ClearITPendingBit(SPI2,SPI_I2S_IT_RXNE);
000016  2160              MOVS     r1,#0x60
000018  4828              LDR      r0,|L7.188|
00001a  f7fffffe          BL       SPI_I2S_ClearITPendingBit
;;;184    		if(LastCh<10)
00001e  4828              LDR      r0,|L7.192|
000020  6800              LDR      r0,[r0,#0]  ; LastCh
000022  280a              CMP      r0,#0xa
000024  da05              BGE      |L7.50|
;;;185    		{			
;;;186    			LastCh++;
000026  4826              LDR      r0,|L7.192|
000028  6800              LDR      r0,[r0,#0]  ; LastCh
00002a  1c40              ADDS     r0,r0,#1
00002c  4924              LDR      r1,|L7.192|
00002e  6008              STR      r0,[r1,#0]  ; LastCh
                  |L7.48|
;;;187    			return;
;;;188    		}
;;;189    		if(RxLeftIdx==0 && RxRightIdx==0 && temp%0x100==0)
;;;190    		{
;;;191    			LastCh=11;
;;;192    		}
;;;193    		else if(LastCh==11)
;;;194    		{ 
;;;195    			//如果为左声道
;;;196    			if(SPI_I2S_GetFlagStatus(SPI2,I2S_FLAG_CHSIDE)==0)
;;;197    			{
;;;198    				AK_Left_Data[RxLeftIdx]=temp;
;;;199    				RxLeftIdx++;
;;;200    			}
;;;201    			//如果为右声道
;;;202    			else
;;;203    			{
;;;204    				AK_Right_Data[RxRightIdx]=temp;
;;;205    				RxRightIdx++;
;;;206    			}
;;;207    			//语音芯片数据计数器
;;;208    			//如果数据采集完毕
;;;209    			if(RxRightIdx>=DataLength*2 && RxLeftIdx>=DataLength*2)
;;;210    			{
;;;211    				//关闭I2S 中断
;;;212    				SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE, DISABLE);
;;;213    				LastCh=-1;
;;;214    			}
;;;215    		}
;;;216    	}
;;;217    }
000030  bd10              POP      {r4,pc}
                  |L7.50|
000032  4924              LDR      r1,|L7.196|
000034  6809              LDR      r1,[r1,#0]            ;189  ; RxLeftIdx
000036  b969              CBNZ     r1,|L7.84|
000038  4923              LDR      r1,|L7.200|
00003a  6809              LDR      r1,[r1,#0]            ;189  ; RxRightIdx
00003c  b951              CBNZ     r1,|L7.84|
00003e  17e1              ASRS     r1,r4,#31             ;189
000040  eb046111          ADD      r1,r4,r1,LSR #24      ;189
000044  1209              ASRS     r1,r1,#8              ;189
000046  eba42101          SUB      r1,r4,r1,LSL #8       ;189
00004a  b919              CBNZ     r1,|L7.84|
00004c  200b              MOVS     r0,#0xb               ;191
00004e  491c              LDR      r1,|L7.192|
000050  6008              STR      r0,[r1,#0]            ;191  ; LastCh
000052  e030              B        |L7.182|
                  |L7.84|
000054  481a              LDR      r0,|L7.192|
000056  6800              LDR      r0,[r0,#0]            ;193  ; LastCh
000058  280b              CMP      r0,#0xb               ;193
00005a  d12c              BNE      |L7.182|
00005c  2104              MOVS     r1,#4                 ;196
00005e  4817              LDR      r0,|L7.188|
000060  f7fffffe          BL       SPI_I2S_GetFlagStatus
000064  b950              CBNZ     r0,|L7.124|
000066  4819              LDR      r0,|L7.204|
000068  4916              LDR      r1,|L7.196|
00006a  6809              LDR      r1,[r1,#0]            ;198  ; RxLeftIdx
00006c  f8204011          STRH     r4,[r0,r1,LSL #1]     ;198
000070  4814              LDR      r0,|L7.196|
000072  6800              LDR      r0,[r0,#0]            ;199  ; RxLeftIdx
000074  1c40              ADDS     r0,r0,#1              ;199
000076  4913              LDR      r1,|L7.196|
000078  6008              STR      r0,[r1,#0]            ;199  ; RxLeftIdx
00007a  e009              B        |L7.144|
                  |L7.124|
00007c  4814              LDR      r0,|L7.208|
00007e  4912              LDR      r1,|L7.200|
000080  6809              LDR      r1,[r1,#0]            ;204  ; RxRightIdx
000082  f8204011          STRH     r4,[r0,r1,LSL #1]     ;204
000086  4810              LDR      r0,|L7.200|
000088  6800              LDR      r0,[r0,#0]            ;205  ; RxRightIdx
00008a  1c40              ADDS     r0,r0,#1              ;205
00008c  490e              LDR      r1,|L7.200|
00008e  6008              STR      r0,[r1,#0]            ;205  ; RxRightIdx
                  |L7.144|
000090  480d              LDR      r0,|L7.200|
000092  6800              LDR      r0,[r0,#0]            ;209  ; RxRightIdx
000094  f5b05fe1          CMP      r0,#0x1c20            ;209
000098  d30d              BCC      |L7.182|
00009a  480a              LDR      r0,|L7.196|
00009c  6800              LDR      r0,[r0,#0]            ;209  ; RxLeftIdx
00009e  f5b05fe1          CMP      r0,#0x1c20            ;209
0000a2  d308              BCC      |L7.182|
0000a4  2200              MOVS     r2,#0                 ;212
0000a6  2160              MOVS     r1,#0x60              ;212
0000a8  4804              LDR      r0,|L7.188|
0000aa  f7fffffe          BL       SPI_I2S_ITConfig
0000ae  f04f30ff          MOV      r0,#0xffffffff        ;213
0000b2  4903              LDR      r1,|L7.192|
0000b4  6008              STR      r0,[r1,#0]            ;213  ; LastCh
                  |L7.182|
0000b6  bf00              NOP      
0000b8  e7ba              B        |L7.48|
;;;218    //这么基础的C语言知识都忘了！
                          ENDP

0000ba  0000              DCW      0x0000
                  |L7.188|
                          DCD      0x40003800
                  |L7.192|
                          DCD      LastCh
                  |L7.196|
                          DCD      RxLeftIdx
                  |L7.200|
                          DCD      RxRightIdx
                  |L7.204|
                          DCD      AK_Left_Data
                  |L7.208|
                          DCD      AK_Right_Data

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;223    *******************************************************************************/
;;;224    void TIM2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;225    { 
;;;226    	static u8 pulsetype;
;;;227    	if(TIM_GetFlagStatus(TIM2,TIM_FLAG_Update)!=RESET)
000002  2101              MOVS     r1,#1
000004  0788              LSLS     r0,r1,#30
000006  f7fffffe          BL       TIM_GetFlagStatus
00000a  2800              CMP      r0,#0
00000c  d075              BEQ      |L8.250|
;;;228    	{
;;;229    		GPIO_WriteBit(GPIO_M1CL, GPIO_Pin_M1CL,(BitAction)pulsetype);
00000e  4864              LDR      r0,|L8.416|
000010  7802              LDRB     r2,[r0,#0]  ; pulsetype
000012  f44f6100          MOV      r1,#0x800
000016  4863              LDR      r0,|L8.420|
000018  f7fffffe          BL       GPIO_WriteBit
;;;230    		pulsetype=~pulsetype;
00001c  4860              LDR      r0,|L8.416|
00001e  7800              LDRB     r0,[r0,#0]  ; pulsetype
000020  43c0              MVNS     r0,r0
000022  495f              LDR      r1,|L8.416|
000024  7008              STRB     r0,[r1,#0]
;;;231    		//如果脉冲够数
;;;232    		if(PulseCount>=PulseNum+AddedNum)
000026  4860              LDR      r0,|L8.424|
000028  8800              LDRH     r0,[r0,#0]  ; PulseNum
00002a  4960              LDR      r1,|L8.428|
00002c  8809              LDRH     r1,[r1,#0]  ; AddedNum
00002e  4408              ADD      r0,r0,r1
000030  495f              LDR      r1,|L8.432|
000032  8809              LDRH     r1,[r1,#0]  ; PulseCount
000034  4288              CMP      r0,r1
000036  dc09              BGT      |L8.76|
;;;233    		{
;;;234    			//关闭中断及timer2
;;;235    			TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
000038  2200              MOVS     r2,#0
00003a  2101              MOVS     r1,#1
00003c  0788              LSLS     r0,r1,#30
00003e  f7fffffe          BL       TIM_ITConfig
;;;236    			TIM_Cmd(TIM2,DISABLE);
000042  2100              MOVS     r1,#0
000044  f04f4080          MOV      r0,#0x40000000
000048  f7fffffe          BL       TIM_Cmd
                  |L8.76|
;;;237    		}
;;;238    		//加压有加减速
;;;239    		if(flagPress)
00004c  4859              LDR      r0,|L8.436|
00004e  7800              LDRB     r0,[r0,#0]  ; flagPress
000050  b3e8              CBZ      r0,|L8.206|
;;;240    		{
;;;241    			//如果出于匀速运行阶段
;;;242    			if(PulseCount>294&&PulseCount<=PulseNum-294)
000052  4857              LDR      r0,|L8.432|
000054  8800              LDRH     r0,[r0,#0]  ; PulseCount
000056  f5b07f93          CMP      r0,#0x126
00005a  dd0c              BLE      |L8.118|
00005c  4852              LDR      r0,|L8.424|
00005e  8800              LDRH     r0,[r0,#0]  ; PulseNum
000060  f5a07093          SUB      r0,r0,#0x126
000064  4952              LDR      r1,|L8.432|
000066  8809              LDRH     r1,[r1,#0]  ; PulseCount
000068  4288              CMP      r0,r1
00006a  db04              BLT      |L8.118|
;;;243    //				TIM2->ARR=1157;
;;;244    				TIM2->ARR=1581;
00006c  f240602d          MOV      r0,#0x62d
000070  0781              LSLS     r1,r0,#30
000072  62c8              STR      r0,[r1,#0x2c]
000074  e089              B        |L8.394|
                  |L8.118|
;;;245    			//如果处于加速阶段
;;;246    			else if(PulseCount<294)
000076  484e              LDR      r0,|L8.432|
000078  8800              LDRH     r0,[r0,#0]  ; PulseCount
00007a  f5b07f93          CMP      r0,#0x126
00007e  da0b              BGE      |L8.152|
;;;247    				TIM2->ARR=moto_ac[PulseCount/2];
000080  494b              LDR      r1,|L8.432|
000082  8808              LDRH     r0,[r1,#0]  ; PulseCount
000084  eb0071d0          ADD      r1,r0,r0,LSR #31
000088  1049              ASRS     r1,r1,#1
00008a  4a4b              LDR      r2,|L8.440|
00008c  f8521021          LDR      r1,[r2,r1,LSL #2]
000090  f04f4280          MOV      r2,#0x40000000
000094  62d1              STR      r1,[r2,#0x2c]
000096  e078              B        |L8.394|
                  |L8.152|
;;;248    			//如果出于减速阶段
;;;249    			else if((PulseNum-PulseCount)<294&&(PulseNum-PulseCount)>0)
000098  4843              LDR      r0,|L8.424|
00009a  8800              LDRH     r0,[r0,#0]  ; PulseNum
00009c  4944              LDR      r1,|L8.432|
00009e  8809              LDRH     r1,[r1,#0]  ; PulseCount
0000a0  1a40              SUBS     r0,r0,r1
0000a2  f5b07f93          CMP      r0,#0x126
0000a6  da17              BGE      |L8.216|
0000a8  483f              LDR      r0,|L8.424|
0000aa  8800              LDRH     r0,[r0,#0]  ; PulseNum
0000ac  4940              LDR      r1,|L8.432|
0000ae  8809              LDRH     r1,[r1,#0]  ; PulseCount
0000b0  1a40              SUBS     r0,r0,r1
0000b2  2800              CMP      r0,#0
0000b4  dd10              BLE      |L8.216|
;;;250    				TIM2->ARR=moto_ac[(PulseNum-PulseCount)/2];
0000b6  493c              LDR      r1,|L8.424|
0000b8  8809              LDRH     r1,[r1,#0]  ; PulseNum
0000ba  4a3d              LDR      r2,|L8.432|
0000bc  8812              LDRH     r2,[r2,#0]  ; PulseCount
0000be  1a88              SUBS     r0,r1,r2
0000c0  eb0071d0          ADD      r1,r0,r0,LSR #31
0000c4  1049              ASRS     r1,r1,#1
0000c6  4a3c              LDR      r2,|L8.440|
0000c8  f8521021          LDR      r1,[r2,r1,LSL #2]
0000cc  e000              B        |L8.208|
                  |L8.206|
0000ce  e009              B        |L8.228|
                  |L8.208|
0000d0  f04f4280          MOV      r2,#0x40000000
0000d4  62d1              STR      r1,[r2,#0x2c]
0000d6  e058              B        |L8.394|
                  |L8.216|
;;;251    			//如果是AddedNum 部分，最低速度运行
;;;252    			else
;;;253    				TIM2->ARR=moto_ac[0];				
0000d8  4837              LDR      r0,|L8.440|
0000da  6800              LDR      r0,[r0,#0]  ; moto_ac
0000dc  f04f4180          MOV      r1,#0x40000000
0000e0  62c8              STR      r0,[r1,#0x2c]
0000e2  e052              B        |L8.394|
                  |L8.228|
;;;254    		}
;;;255    		else
;;;256    		{	//匀速
;;;257    			if(StartSpeed==TargeSpeed)
0000e4  4835              LDR      r0,|L8.444|
0000e6  7800              LDRB     r0,[r0,#0]  ; StartSpeed
0000e8  4935              LDR      r1,|L8.448|
0000ea  7809              LDRB     r1,[r1,#0]  ; TargeSpeed
0000ec  4288              CMP      r0,r1
0000ee  d105              BNE      |L8.252|
;;;258    			{
;;;259    //				TIM2->ARR=1157;
;;;260    				TIM2->ARR=1581;
0000f0  f240602d          MOV      r0,#0x62d
0000f4  0781              LSLS     r1,r0,#30
0000f6  62c8              STR      r0,[r1,#0x2c]
0000f8  e047              B        |L8.394|
                  |L8.250|
0000fa  e04f              B        |L8.412|
                  |L8.252|
;;;261    			}
;;;262    			else
;;;263    			{
;;;264    				//不加压有加减速
;;;265    				//如果出于匀速运行阶段
;;;266    				if(PulseCount>324&&PulseCount<=PulseNum-324)
0000fc  482c              LDR      r0,|L8.432|
0000fe  8800              LDRH     r0,[r0,#0]  ; PulseCount
000100  f5b07fa2          CMP      r0,#0x144
000104  dd0d              BLE      |L8.290|
000106  4828              LDR      r0,|L8.424|
000108  8800              LDRH     r0,[r0,#0]  ; PulseNum
00010a  f5a070a2          SUB      r0,r0,#0x144
00010e  4928              LDR      r1,|L8.432|
000110  8809              LDRH     r1,[r1,#0]  ; PulseCount
000112  4288              CMP      r0,r1
000114  db05              BLT      |L8.290|
;;;267    //					TIM2->ARR=556;
;;;268    					TIM2->ARR=760;
000116  f44f703e          MOV      r0,#0x2f8
00011a  f04f4180          MOV      r1,#0x40000000
00011e  62c8              STR      r0,[r1,#0x2c]
000120  e033              B        |L8.394|
                  |L8.290|
;;;269    				//如果处于加速阶段
;;;270    				else if(PulseCount<324)
000122  4823              LDR      r0,|L8.432|
000124  8800              LDRH     r0,[r0,#0]  ; PulseCount
000126  f5b07fa2          CMP      r0,#0x144
00012a  da0b              BGE      |L8.324|
;;;271    					TIM2->ARR=Speedup_moto[PulseCount/2];
00012c  4920              LDR      r1,|L8.432|
00012e  8808              LDRH     r0,[r1,#0]  ; PulseCount
000130  eb0071d0          ADD      r1,r0,r0,LSR #31
000134  1049              ASRS     r1,r1,#1
000136  4a23              LDR      r2,|L8.452|
000138  f8521021          LDR      r1,[r2,r1,LSL #2]
00013c  f04f4280          MOV      r2,#0x40000000
000140  62d1              STR      r1,[r2,#0x2c]
000142  e022              B        |L8.394|
                  |L8.324|
;;;272    				//如果出于减速阶段
;;;273    				else if((PulseNum-PulseCount)<324&&(PulseNum-PulseCount)>0)
000144  4818              LDR      r0,|L8.424|
000146  8800              LDRH     r0,[r0,#0]  ; PulseNum
000148  4919              LDR      r1,|L8.432|
00014a  8809              LDRH     r1,[r1,#0]  ; PulseCount
00014c  1a40              SUBS     r0,r0,r1
00014e  f5b07fa2          CMP      r0,#0x144
000152  da15              BGE      |L8.384|
000154  4814              LDR      r0,|L8.424|
000156  8800              LDRH     r0,[r0,#0]  ; PulseNum
000158  4915              LDR      r1,|L8.432|
00015a  8809              LDRH     r1,[r1,#0]  ; PulseCount
00015c  1a40              SUBS     r0,r0,r1
00015e  2800              CMP      r0,#0
000160  dd0e              BLE      |L8.384|
;;;274    					TIM2->ARR=Speedup_moto[(PulseNum-PulseCount)/2];
000162  4911              LDR      r1,|L8.424|
000164  8809              LDRH     r1,[r1,#0]  ; PulseNum
000166  4a12              LDR      r2,|L8.432|
000168  8812              LDRH     r2,[r2,#0]  ; PulseCount
00016a  1a88              SUBS     r0,r1,r2
00016c  eb0071d0          ADD      r1,r0,r0,LSR #31
000170  1049              ASRS     r1,r1,#1
000172  4a14              LDR      r2,|L8.452|
000174  f8521021          LDR      r1,[r2,r1,LSL #2]
000178  f04f4280          MOV      r2,#0x40000000
00017c  62d1              STR      r1,[r2,#0x2c]
00017e  e004              B        |L8.394|
                  |L8.384|
;;;275    				//如果是AddedNum 部分，最低速度运行
;;;276    				else
;;;277    					TIM2->ARR=Speedup_moto[0];	
000180  4810              LDR      r0,|L8.452|
000182  6800              LDR      r0,[r0,#0]  ; Speedup_moto
000184  f04f4180          MOV      r1,#0x40000000
000188  62c8              STR      r0,[r1,#0x2c]
                  |L8.394|
;;;278    			}
;;;279    		}
;;;280    		PulseCount++;
00018a  4809              LDR      r0,|L8.432|
00018c  8800              LDRH     r0,[r0,#0]  ; PulseCount
00018e  1c40              ADDS     r0,r0,#1
000190  4907              LDR      r1,|L8.432|
000192  8008              STRH     r0,[r1,#0]
;;;281    		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);	
000194  2101              MOVS     r1,#1
000196  0788              LSLS     r0,r1,#30
000198  f7fffffe          BL       TIM_ClearITPendingBit
                  |L8.412|
;;;282    	}
;;;283    }	
00019c  bd10              POP      {r4,pc}
;;;284    
                          ENDP

00019e  0000              DCW      0x0000
                  |L8.416|
                          DCD      pulsetype
                  |L8.420|
                          DCD      0x40021c00
                  |L8.424|
                          DCD      PulseNum
                  |L8.428|
                          DCD      AddedNum
                  |L8.432|
                          DCD      PulseCount
                  |L8.436|
                          DCD      flagPress
                  |L8.440|
                          DCD      moto_ac
                  |L8.444|
                          DCD      StartSpeed
                  |L8.448|
                          DCD      TargeSpeed
                  |L8.452|
                          DCD      Speedup_moto

                          AREA ||i.TIM5_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM5_IRQHandler PROC
;;;151    //切光片电机使用TIM1中断
;;;152    void TIM5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;153    {
;;;154    	if(Step_LM<10000)	//加速过程
000002  4814              LDR      r0,|L9.84|
000004  6800              LDR      r0,[r0,#0]  ; Step_LM
000006  f2427110          MOV      r1,#0x2710
00000a  4288              CMP      r0,r1
00000c  d216              BCS      |L9.60|
;;;155    	{
;;;156    		//清除中断标志
;;;157    		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
00000e  2101              MOVS     r1,#1
000010  4811              LDR      r0,|L9.88|
000012  f7fffffe          BL       TIM_ClearITPendingBit
;;;158    		TIM5->ARR=(Speedup[(u8)((Step_LM++)/50)]<<1)-1;
000016  490f              LDR      r1,|L9.84|
000018  6808              LDR      r0,[r1,#0]  ; Step_LM
00001a  1c41              ADDS     r1,r0,#1
00001c  4a0d              LDR      r2,|L9.84|
00001e  6011              STR      r1,[r2,#0]  ; Step_LM
000020  2132              MOVS     r1,#0x32
000022  fbb0f1f1          UDIV     r1,r0,r1
000026  b2c9              UXTB     r1,r1
000028  4a0c              LDR      r2,|L9.92|
00002a  f8521021          LDR      r1,[r2,r1,LSL #2]
00002e  2201              MOVS     r2,#1
000030  ebc20141          RSB      r1,r2,r1,LSL #1
000034  4a08              LDR      r2,|L9.88|
000036  322c              ADDS     r2,r2,#0x2c
000038  6011              STR      r1,[r2,#0]
00003a  e009              B        |L9.80|
                  |L9.60|
;;;159    	}
;;;160    	else
;;;161    	{					
;;;162    		//转速达到启动PWM
;;;163    		TIM_ITConfig(TIM5, TIM_IT_Update, DISABLE);
00003c  2200              MOVS     r2,#0
00003e  2101              MOVS     r1,#1
000040  4805              LDR      r0,|L9.88|
000042  f7fffffe          BL       TIM_ITConfig
;;;164    //		TIM5->ARR=4499;
;;;165    //		TIM5->CCER=0x000B;
;;;166    //		TIM5->CNT=0x1193;//8b3
;;;167    //		TIM5->ARR=3071;
;;;168    //		TIM5->CCER=0x000B;
;;;169    //		TIM5->CNT=0x08b3;
;;;170    				TIM5->ARR=4199;
000046  f2410067          MOV      r0,#0x1067
00004a  4903              LDR      r1,|L9.88|
00004c  312c              ADDS     r1,r1,#0x2c
00004e  6008              STR      r0,[r1,#0]
                  |L9.80|
;;;171    	}	 	
;;;172    }
000050  bd10              POP      {r4,pc}
;;;173    
                          ENDP

000052  0000              DCW      0x0000
                  |L9.84|
                          DCD      Step_LM
                  |L9.88|
                          DCD      0x40000c00
                  |L9.92|
                          DCD      Speedup

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
;;;105    */
;;;106    void UsageFault_Handler(void)
000000  bf00              NOP      
                  |L10.2|
;;;107    {
;;;108      /* 当用法异常时进入死循环 */
;;;109      while (1)
000002  e7fe              B        |L10.2|
;;;110      {
;;;111      }
;;;112    }
;;;113    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  Speedup_moto
                          DCD      0x00000aef
                          DCD      0x00000adb
                          DCD      0x00000ad0
                          DCD      0x00000ac5
                          DCD      0x00000ab7
                          DCD      0x00000aa8
                          DCD      0x00000a96
                          DCD      0x00000a84
                          DCD      0x00000a71
                          DCD      0x00000a5b
                          DCD      0x00000a46
                          DCD      0x00000a2e
                          DCD      0x00000a16
                          DCD      0x000009fc
                          DCD      0x000009e2
                          DCD      0x000009c8
                          DCD      0x000009ab
                          DCD      0x00000990
                          DCD      0x00000973
                          DCD      0x00000956
                          DCD      0x0000093a
                          DCD      0x0000091c
                          DCD      0x000008ff
                          DCD      0x000008e1
                          DCD      0x000008c4
                          DCD      0x000008a6
                          DCD      0x00000889
                          DCD      0x0000086b
                          DCD      0x0000084f
                          DCD      0x00000832
                          DCD      0x00000815
                          DCD      0x000007f8
                          DCD      0x000007dc
                          DCD      0x000007c0
                          DCD      0x000007a5
                          DCD      0x0000078a
                          DCD      0x0000076e
                          DCD      0x00000754
                          DCD      0x0000073a
                          DCD      0x00000720
                          DCD      0x00000706
                          DCD      0x000006ee
                          DCD      0x000006d5
                          DCD      0x000006bd
                          DCD      0x000006a5
                          DCD      0x0000068d
                          DCD      0x00000676
                          DCD      0x00000660
                          DCD      0x00000648
                          DCD      0x00000633
                          DCD      0x0000061d
                          DCD      0x00000607
                          DCD      0x000005f2
                          DCD      0x000005de
                          DCD      0x000005c9
                          DCD      0x000005b5
                          DCD      0x000005a0
                          DCD      0x0000058d
                          DCD      0x0000057a
                          DCD      0x00000567
                          DCD      0x00000554
                          DCD      0x00000542
                          DCD      0x0000052f
                          DCD      0x0000051d
                          DCD      0x0000050b
                          DCD      0x000004fb
                          DCD      0x000004e9
                          DCD      0x000004d7
                          DCD      0x000004c7
                          DCD      0x000004b7
                          DCD      0x000004a6
                          DCD      0x00000496
                          DCD      0x00000485
                          DCD      0x00000475
                          DCD      0x00000465
                          DCD      0x00000456
                          DCD      0x00000445
                          DCD      0x00000436
                          DCD      0x00000426
                          DCD      0x00000417
                          DCD      0x00000408
                          DCD      0x000003f7
                          DCD      0x000003e8
                          DCD      0x000003d8
                          DCD      0x000003c9
                          DCD      0x000003b8
                          DCD      0x000003ab
                          DCD      0x0000039d
                          DCD      0x00000391
                          DCD      0x00000387
                          DCD      0x0000037e
                          DCD      0x00000377
                          DCD      0x00000370
                          DCD      0x00000369
                          DCD      0x00000362
                          DCD      0x0000035d
                          DCD      0x00000359
                          DCD      0x00000353
                          DCD      0x0000034f
                          DCD      0x0000034b
                          DCD      0x00000347
                          DCD      0x00000343
                          DCD      0x0000033f
                          DCD      0x0000033c
                          DCD      0x00000338
                          DCD      0x00000335
                          DCD      0x00000332
                          DCD      0x00000330
                          DCD      0x0000032d
                          DCD      0x0000032a
                          DCD      0x00000327
                          DCD      0x00000325
                          DCD      0x00000323
                          DCD      0x00000321
                          DCD      0x0000031f
                          DCD      0x0000031c
                          DCD      0x0000031b
                          DCD      0x00000318
                          DCD      0x00000317
                          DCD      0x00000316
                          DCD      0x00000314
                          DCD      0x00000312
                          DCD      0x00000310
                          DCD      0x0000030f
                          DCD      0x0000030d
                          DCD      0x0000030c
                          DCD      0x0000030b
                          DCD      0x00000309
                          DCD      0x00000309
                          DCD      0x00000308
                          DCD      0x00000307
                          DCD      0x00000305
                          DCD      0x00000304
                          DCD      0x00000304
                          DCD      0x00000302
                          DCD      0x00000301
                          DCD      0x00000301
                          DCD      0x00000300
                          DCD      0x00000300
                          DCD      0x000002fe
                          DCD      0x000002fe
                          DCD      0x000002fd
                          DCD      0x000002fd
                          DCD      0x000002fc
                          DCD      0x000002fc
                          DCD      0x000002fa
                          DCD      0x000002fa
                          DCD      0x000002fa
                          DCD      0x000002f9
                          DCD      0x000002f9
                          DCD      0x000002f9
                          DCD      0x000002f9
                          DCD      0x000002f8
                          DCD      0x000002f8
                          DCD      0x000002f8
                          DCD      0x000002f8
                          DCD      0x000002f8
                          DCD      0x000002f8
                          DCD      0x000002f8
                          DCD      0x000002f8
                          DCD      0x000002f8
                          DCD      0x000002f8
                  moto_ac
                          DCD      0x00000aef
                          DCD      0x00000aee
                          DCD      0x00000aee
                          DCD      0x00000aec
                          DCD      0x00000aeb
                          DCD      0x00000aea
                          DCD      0x00000ae7
                          DCD      0x00000ae4
                          DCD      0x00000ae1
                          DCD      0x00000add
                          DCD      0x00000ad9
                          DCD      0x00000ad5
                          DCD      0x00000ad1
                          DCD      0x00000acc
                          DCD      0x00000ac6
                          DCD      0x00000ac1
                          DCD      0x00000abb
                          DCD      0x00000ab4
                          DCD      0x00000aae
                          DCD      0x00000aa7
                          DCD      0x00000aa0
                          DCD      0x00000a98
                          DCD      0x00000a8f
                          DCD      0x00000a87
                          DCD      0x00000a7f
                          DCD      0x00000a75
                          DCD      0x00000a6c
                          DCD      0x00000a64
                          DCD      0x00000a5a
                          DCD      0x00000a4f
                          DCD      0x00000a46
                          DCD      0x00000a3b
                          DCD      0x00000a31
                          DCD      0x00000a26
                          DCD      0x00000a1b
                          DCD      0x00000a10
                          DCD      0x00000a05
                          DCD      0x000009f9
                          DCD      0x000009ee
                          DCD      0x000009e3
                          DCD      0x000009d7
                          DCD      0x000009cb
                          DCD      0x000009be
                          DCD      0x000009b3
                          DCD      0x000009a7
                          DCD      0x0000099b
                          DCD      0x0000098e
                          DCD      0x00000982
                          DCD      0x00000976
                          DCD      0x0000096a
                          DCD      0x0000095c
                          DCD      0x00000950
                          DCD      0x00000943
                          DCD      0x00000937
                          DCD      0x00000929
                          DCD      0x0000091d
                          DCD      0x00000911
                          DCD      0x00000904
                          DCD      0x000008f7
                          DCD      0x000008ea
                          DCD      0x000008de
                          DCD      0x000008d2
                          DCD      0x000008c5
                          DCD      0x000008b8
                          DCD      0x000008ac
                          DCD      0x0000089f
                          DCD      0x00000893
                          DCD      0x00000887
                          DCD      0x0000087a
                          DCD      0x0000086e
                          DCD      0x00000862
                          DCD      0x00000855
                          DCD      0x00000849
                          DCD      0x0000083d
                          DCD      0x00000832
                          DCD      0x00000826
                          DCD      0x00000819
                          DCD      0x0000080d
                          DCD      0x00000802
                          DCD      0x000007f6
                          DCD      0x000007eb
                          DCD      0x000007de
                          DCD      0x000007d4
                          DCD      0x000007c9
                          DCD      0x000007bc
                          DCD      0x000007b1
                          DCD      0x000007a6
                          DCD      0x0000079b
                          DCD      0x00000791
                          DCD      0x00000786
                          DCD      0x0000077b
                          DCD      0x00000770
                          DCD      0x00000765
                          DCD      0x0000075a
                          DCD      0x00000750
                          DCD      0x00000745
                          DCD      0x0000073c
                          DCD      0x00000731
                          DCD      0x00000727
                          DCD      0x0000071c
                          DCD      0x00000713
                          DCD      0x00000709
                          DCD      0x000006fe
                          DCD      0x000006f5
                          DCD      0x000006eb
                          DCD      0x000006e2
                          DCD      0x000006d8
                          DCD      0x000006ce
                          DCD      0x000006c5
                          DCD      0x000006bd
                          DCD      0x000006b7
                          DCD      0x000006af
                          DCD      0x000006a7
                          DCD      0x0000069f
                          DCD      0x00000698
                          DCD      0x00000690
                          DCD      0x00000689
                          DCD      0x00000683
                          DCD      0x0000067c
                          DCD      0x00000677
                          DCD      0x00000671
                          DCD      0x0000066c
                          DCD      0x00000667
                          DCD      0x00000661
                          DCD      0x0000065d
                          DCD      0x00000659
                          DCD      0x00000655
                          DCD      0x00000651
                          DCD      0x0000064d
                          DCD      0x0000064a
                          DCD      0x00000647
                          DCD      0x00000643
                          DCD      0x00000640
                          DCD      0x0000063e
                          DCD      0x0000063c
                          DCD      0x00000639
                          DCD      0x00000638
                          DCD      0x00000635
                          DCD      0x00000634
                          DCD      0x00000633
                          DCD      0x00000631
                          DCD      0x00000630
                          DCD      0x00000630
                          DCD      0x0000062e
                          DCD      0x0000062e
                          DCD      0x0000062e
                          DCD      0x0000062d

                          AREA ||.data||, DATA, ALIGN=2

                  LastCh
                          DCD      0xffffffff
                  pulsetype
000004  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\User\\bsp_stm32f4xx\\stm32f4xx_it.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_a8217051____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_stm32f4xx_it_c_a8217051____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_a8217051____REVSH|
#line 144
|__asm___14_stm32f4xx_it_c_a8217051____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
