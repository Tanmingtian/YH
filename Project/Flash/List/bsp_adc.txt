; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_adc.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_adc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\User -I..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\User\fonts -I..\emWin\GUI_X -I..\emWin\Config -I..\emWin\Include -I..\emWin\emWinTask -I..\User\bsp_stm32f4xx -I..\User\bsp_stm32f4xx\inc -I..\User\images -I..\User\bsp_stm32f4xx\src -I..\User\DSP_Lib\inc -I..\User\DSP_Lib\src -I..\Libraries\STM32F4x7_ETH_Driver\src -I..\Libraries\STM32F4x7_ETH_Driver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F427_437xx -DSTM32F427_437xx --omf_browse=.\flash\obj\bsp_adc.crf ..\User\bsp_stm32f4xx\src\bsp_adc.c]
                          THUMB

                          AREA ||i.TIM1_Config||, CODE, READONLY, ALIGN=2

                  TIM1_Config PROC
;;;97     */
;;;98     static void TIM1_Config(void)
000000  b500              PUSH     {lr}
;;;99     {
000002  b089              SUB      sp,sp,#0x24
;;;100        TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;101        TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;102        
;;;103        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);			   			//使能定时器1时钟
000004  2101              MOVS     r1,#1
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;104        
;;;105        TIM_Cmd(TIM1, DISABLE);	
00000c  2100              MOVS     r1,#0
00000e  4817              LDR      r0,|L1.108|
000010  f7fffffe          BL       TIM_Cmd
;;;106        
;;;107         /* --------------------------------------------------------
;;;108        system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;109    
;;;110        HCLK = SYSCLK / 1     (AHB1Periph)
;;;111        PCLK2 = HCLK / 2      (APB2Periph)
;;;112        PCLK1 = HCLK / 4      (APB1Periph)
;;;113    
;;;114        因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;115        因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;116    
;;;117        APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13, TIM14
;;;118        APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;119              
;;;120        TIM6 更新周期是 = TIM1CLK / （TIM_Period + 1）/（TIM_Prescaler + 1）
;;;121        ----------------------------------------------------------- */
;;;122        
;;;123        TIM_TimeBaseStructInit(&TIM_TimeBaseStructure); 				   //初始化定时器1的寄存器为复位值
000014  a806              ADD      r0,sp,#0x18
000016  f7fffffe          BL       TIM_TimeBaseStructInit
;;;124        TIM_TimeBaseStructure.TIM_Period = 168000000 / 10000-1;    //ARR自动重装载寄存器周期的值(定时时间）到设置频率后产生个更新或者中断(也是说定时时间到)
00001a  f244109f          MOV      r0,#0x419f
00001e  9007              STR      r0,[sp,#0x1c]
;;;125        TIM_TimeBaseStructure.TIM_Prescaler = 16800-1;   						   //PSC时钟预分频数 例如：时钟频率=TIM1CLK/(时钟预分频+1)
000020  f8ad0018          STRH     r0,[sp,#0x18]
;;;126        TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;    				   //CR1->CKD时间分割值
000024  2000              MOVS     r0,#0
000026  f8ad0020          STRH     r0,[sp,#0x20]
;;;127        TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  	   //CR1->CMS[1:0]和DIR定时器模式 向上计数
00002a  f8ad001a          STRH     r0,[sp,#0x1a]
;;;128        TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
00002e  a906              ADD      r1,sp,#0x18
000030  480e              LDR      r0,|L1.108|
000032  f7fffffe          BL       TIM_TimeBaseInit
;;;129    
;;;130        TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; 				      //CCMR2在向上计数时，一旦TIMx_CNT<TIMx_CCR1时通道1为有效电平，否则为无效电平
000036  2060              MOVS     r0,#0x60
000038  f8ad0004          STRH     r0,[sp,#4]
;;;131        TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;         //CCER 输出使能          
00003c  2001              MOVS     r0,#1
00003e  f8ad0006          STRH     r0,[sp,#6]
;;;132        TIM_OCInitStructure.TIM_Pulse = TIM_TimeBaseStructure.TIM_Period / 2;//CCR3同计数器TIMx_CNT的比较，并在OC4端口上产生输出信号 
000042  9807              LDR      r0,[sp,#0x1c]
000044  0840              LSRS     r0,r0,#1
000046  9003              STR      r0,[sp,#0xc]
;;;133        TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;    	     //CCER输出极性设置	高电平有效     
000048  2002              MOVS     r0,#2
00004a  f8ad0010          STRH     r0,[sp,#0x10]
;;;134        TIM_OC4Init(TIM1, &TIM_OCInitStructure);
00004e  a901              ADD      r1,sp,#4
000050  4806              LDR      r0,|L1.108|
000052  f7fffffe          BL       TIM_OC4Init
;;;135        //TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);					 //CMR2 设置预装载使能  更新事件产生时写入有效
;;;136        //TIM_ARRPreloadConfig(TIM1, ENABLE);		   		 				 //CR1  设置ARR自动重装 更新事件产生时写入有效
;;;137        TIM_Cmd(TIM1, ENABLE);	
000056  2101              MOVS     r1,#1
000058  4804              LDR      r0,|L1.108|
00005a  f7fffffe          BL       TIM_Cmd
;;;138        TIM_CtrlPWMOutputs(TIM1, ENABLE);  								   //使能PWM 输出
00005e  2101              MOVS     r1,#1
000060  4802              LDR      r0,|L1.108|
000062  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;139    }
000066  b009              ADD      sp,sp,#0x24
000068  bd00              POP      {pc}
;;;140    
                          ENDP

00006a  0000              DCW      0x0000
                  |L1.108|
                          DCD      0x40010000

                          AREA ||i.bsp_InitADC||, CODE, READONLY, ALIGN=2

                  bsp_InitADC PROC
;;;31     */
;;;32     void bsp_InitADC(void)
000000  b500              PUSH     {lr}
;;;33     {  
000002  b08d              SUB      sp,sp,#0x34
;;;34         ADC_InitTypeDef       ADC_InitStructure;
;;;35         ADC_CommonInitTypeDef ADC_CommonInitStructure;
;;;36         GPIO_InitTypeDef      GPIO_InitStructure;  
;;;37         NVIC_InitTypeDef NVIC_InitStructure;
;;;38     
;;;39         /* 配置ADC中断，用于注入中断模式 */
;;;40         NVIC_InitStructure.NVIC_IRQChannel = ADC_IRQn;
000004  2012              MOVS     r0,#0x12
000006  f88d0000          STRB     r0,[sp,#0]
;;;41         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
00000a  2000              MOVS     r0,#0
00000c  f88d0001          STRB     r0,[sp,#1]
;;;42         NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000010  f88d0002          STRB     r0,[sp,#2]
;;;43         NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000014  2001              MOVS     r0,#1
000016  f88d0003          STRB     r0,[sp,#3]
;;;44         NVIC_Init(&NVIC_InitStructure);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       NVIC_Init
;;;45     
;;;46         /* 使能 ADC3, DMA2 和 GPIO 时钟 --------------------------------------------*/
;;;47         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
000020  2101              MOVS     r1,#1
000022  2020              MOVS     r0,#0x20
000024  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;48         RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);
000028  2101              MOVS     r1,#1
00002a  0288              LSLS     r0,r1,#10
00002c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;49     
;;;50         /* 配置ADC引脚 -------------------------------------------------------------*/
;;;51         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000030  f44f7000          MOV      r0,#0x200
000034  9001              STR      r0,[sp,#4]
;;;52         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
000036  2003              MOVS     r0,#3
000038  f88d0008          STRB     r0,[sp,#8]
;;;53         GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
00003c  2000              MOVS     r0,#0
00003e  f88d000b          STRB     r0,[sp,#0xb]
;;;54         GPIO_Init(GPIOF, &GPIO_InitStructure);
000042  a901              ADD      r1,sp,#4
000044  4821              LDR      r0,|L2.204|
000046  f7fffffe          BL       GPIO_Init
;;;55     
;;;56         /* ADC 公共部分初始化 -------------------------------------------------------*/
;;;57         ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
00004a  2000              MOVS     r0,#0
00004c  9003              STR      r0,[sp,#0xc]
;;;58         ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div8;
00004e  f44f3040          MOV      r0,#0x30000
000052  9004              STR      r0,[sp,#0x10]
;;;59         ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
000054  2000              MOVS     r0,#0
000056  9005              STR      r0,[sp,#0x14]
;;;60         ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
000058  9006              STR      r0,[sp,#0x18]
;;;61         ADC_CommonInit(&ADC_CommonInitStructure);
00005a  a803              ADD      r0,sp,#0xc
00005c  f7fffffe          BL       ADC_CommonInit
;;;62     
;;;63         /* ADC3 初始化 --------------------------------------------------------------*/
;;;64         ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
000060  2000              MOVS     r0,#0
000062  9007              STR      r0,[sp,#0x1c]
;;;65         ADC_InitStructure.ADC_ScanConvMode = DISABLE;
000064  f88d0020          STRB     r0,[sp,#0x20]
;;;66         ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
000068  2001              MOVS     r0,#1
00006a  f88d0021          STRB     r0,[sp,#0x21]
;;;67         ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigInjecConvEdge_None;
00006e  2000              MOVS     r0,#0
000070  9009              STR      r0,[sp,#0x24]
;;;68         ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC3;
000072  f04f7000          MOV      r0,#0x2000000
000076  900a              STR      r0,[sp,#0x28]
;;;69         ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
000078  2000              MOVS     r0,#0
00007a  900b              STR      r0,[sp,#0x2c]
;;;70         ADC_InitStructure.ADC_NbrOfConversion = 1;
00007c  2001              MOVS     r0,#1
00007e  f88d0030          STRB     r0,[sp,#0x30]
;;;71         ADC_Init(ADC3, &ADC_InitStructure);
000082  a907              ADD      r1,sp,#0x1c
000084  4812              LDR      r0,|L2.208|
000086  f7fffffe          BL       ADC_Init
;;;72     
;;;73         /* ADC3 注入通道配置 -----------------------------------------------------------*/
;;;74         ADC_InjectedChannelConfig(ADC3, ADC_Channel_7, 1, ADC_SampleTime_3Cycles);
00008a  2300              MOVS     r3,#0
00008c  2201              MOVS     r2,#1
00008e  2107              MOVS     r1,#7
000090  480f              LDR      r0,|L2.208|
000092  f7fffffe          BL       ADC_InjectedChannelConfig
;;;75         /* 设置注入序列长度 */
;;;76         ADC_InjectedSequencerLengthConfig(ADC3, 1); 
000096  2101              MOVS     r1,#1
000098  480d              LDR      r0,|L2.208|
00009a  f7fffffe          BL       ADC_InjectedSequencerLengthConfig
;;;77         /* 注入通道外部触发配置 */
;;;78         ADC_ExternalTrigInjectedConvConfig(ADC3, ADC_ExternalTrigInjecConv_T1_CC4);
00009e  2100              MOVS     r1,#0
0000a0  480b              LDR      r0,|L2.208|
0000a2  f7fffffe          BL       ADC_ExternalTrigInjectedConvConfig
;;;79         ADC_ExternalTrigInjectedConvEdgeConfig(ADC3, ADC_ExternalTrigInjecConvEdge_Rising);
0000a6  f44f1180          MOV      r1,#0x100000
0000aa  4809              LDR      r0,|L2.208|
0000ac  f7fffffe          BL       ADC_ExternalTrigInjectedConvEdgeConfig
;;;80         
;;;81         /* 使能注入中断 */
;;;82         ADC_ITConfig(ADC3, ADC_IT_JEOC, ENABLE);
0000b0  2201              MOVS     r2,#1
0000b2  f2404107          MOV      r1,#0x407
0000b6  4806              LDR      r0,|L2.208|
0000b8  f7fffffe          BL       ADC_ITConfig
;;;83         
;;;84         /* 使能ADC3 */
;;;85         ADC_Cmd(ADC3, ENABLE);
0000bc  2101              MOVS     r1,#1
0000be  4804              LDR      r0,|L2.208|
0000c0  f7fffffe          BL       ADC_Cmd
;;;86         
;;;87         TIM1_Config();
0000c4  f7fffffe          BL       TIM1_Config
;;;88     }
0000c8  b00d              ADD      sp,sp,#0x34
0000ca  bd00              POP      {pc}
;;;89     
                          ENDP

                  |L2.204|
                          DCD      0x40021400
                  |L2.208|
                          DCD      0x40012200

;*** Start embedded assembler ***

#line 1 "..\\User\\bsp_stm32f4xx\\src\\bsp_adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_adc_c_9b6e839a____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_adc_c_9b6e839a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_adc_c_9b6e839a____REVSH|
#line 144
|__asm___9_bsp_adc_c_9b6e839a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
